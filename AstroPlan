//[Row][Column]
//@customFunction
function getDependencies(moduleName, ModuleData, BasicResourceData, SmelterData) {
  
  var returnText = "";
  var totalDependencies = [];
  var stack = [];
   
  stack.push(moduleName);
    
  while (stack.length > 0){    
    //returnText += "[S:" + stack + "]";
    var item = stack.pop();
    
    //See if it's a basic resource
    if (getBasicResource(BasicResourceData, item)) {
      totalDependencies.push(item);
      //returnText += "[BR:" + item + "]";
      
      continue;
    }
    
    //Find if it's a machine, and get the resources
    var moduleResources =[];
    moduleResources = getModuleResources(ModuleData, item);
    if (moduleResources.length > 0){
      
      if (totalDependencies.indexOf(item) == -1) {
        totalDependencies.push(item);
      }
      stack = stack.concat(moduleResources);
      continue;
    }
    
    //Check Smelting
    var resource = getSmeltedResources(SmelterData, item);
    if (resource){
      if (totalDependencies.indexOf("Smelting Furnace") == -1) {
        totalDependencies.push("Smelting Furnace");
        stack.push("Smelting Furnace");
      }
      stack.push(resource);
      continue;
    }
    returnText += "||";
//    //didnt find anything, Dump the stack
//    returnText += " STACK_UNDERFLOW: ";
//    for(var i = 0; i < stack.length; i++){
//      returnText += stack[i];
//    }
  }
  
  for (var i = 0; i < totalDependencies.length; i++){
    returnText += totalDependencies[i];
    returnText += ",";
  }
  
  return returnText;
}

function getBasicResource(BasicResourceData, resource){
  for (var i = 0; i < BasicResourceData.length; i++){
    if (BasicResourceData[i][0] == resource){
      return true;
    } 
  }
  return false;
}

function getSmeltedResources(SmelterData, resource){
  for (var i = 0; i < SmelterData.length; i++){
    if (SmelterData[i][0] == resource){
      return SmelterData[i][1];
    } 
  }
  return false;
}

function getModuleResources(ModuleData, moduleName){
  //Find Module
  var index = 0;  
  var moduleRow = -1;  
  //TODO: check all rows until one is empty
  while(index < 40) {
    if (ModuleData[index][0] == moduleName){
      moduleRow = index;
      break;
    } 
    index++;
  }
  
  //Find resources for module
  var resources = [];
  
  if (moduleRow == -1){
    return resources;
  }
  
  resources = ModuleData[moduleRow][4].split(","); 
    
  
  return resources;
}
